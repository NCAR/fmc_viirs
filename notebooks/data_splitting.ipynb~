{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append('..')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd, yaml\n",
    "from fmcml.data import load_data, data_splitter, data_shuffle_splitter\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = \"../config/nn.yml\"\n",
    "with open(config) as cf:\n",
    "    conf = yaml.load(cf, Loader=yaml.FullLoader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "seed = conf[\"seed\"]\n",
    "verbose = conf[\"verbose\"]\n",
    "\n",
    "save_loc = conf[\"save_loc\"]\n",
    "data_loc = conf[\"data_loc\"]\n",
    "input_vars = conf[\"input_vars\"]\n",
    "static_vars = conf[\"static_vars\"]\n",
    "output_vars = conf[\"output_vars\"]\n",
    "#verbose = conf[\"verbose\"]\n",
    "total_input_vars = input_vars + static_vars\n",
    "\n",
    "# model config\n",
    "input_size = len(total_input_vars)\n",
    "middle_size = conf[\"model\"][\"middle_size\"] \n",
    "output_size = len(output_vars)\n",
    "dropout = conf[\"model\"][\"dropout\"]\n",
    "num_layers = conf[\"model\"][\"num_layers\"]\n",
    "#optimzer config\n",
    "learning_rate = conf[\"optimizer\"][\"learning_rate\"]\n",
    "L2_penalty = conf[\"optimizer\"][\"L2_penalty\"]\n",
    "# trainer config\n",
    "n_splits = conf[\"trainer\"][\"n_splits\"]\n",
    "batch_size = conf[\"trainer\"][\"batch_size\"]\n",
    "valid_batch_size = conf[\"trainer\"][\"valid_batch_size\"]\n",
    "lr_patience = conf[\"trainer\"][\"lr_patience\"]\n",
    "stopping_patience = conf[\"trainer\"][\"stopping_patience\"]\n",
    "epochs = conf[\"trainer\"][\"epochs\"]\n",
    "batches_per_epoch = conf[\"trainer\"][\"batches_per_epoch\"]\n",
    "training_loss = conf[\"trainer\"][\"training_loss\"]\n",
    "metric = conf[\"trainer\"][\"metric\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the data frame with filtered columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = load_data(\n",
    "    data_loc,\n",
    "    verbose = verbose,\n",
    "    filter_input_vars = total_input_vars, \n",
    "    filter_output_vars = output_vars\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split the data by d-m-y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"day\"] = df[\"Times\"].astype(str).apply(lambda x: x.split(\" \")[0])\n",
    "\n",
    "data_folds_day = data_splitter(df, \n",
    "                           n_splits = n_splits, \n",
    "                           seed = seed, \n",
    "                           columns = [\"day\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(383517, 41) (51984, 41) (51076, 41)\n"
     ]
    }
   ],
   "source": [
    "for train, valid, test in data_folds_day:\n",
    "    print(train.shape, valid.shape, test.shape)\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'FMC value')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x504 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 7), sharex=True, sharey='col')\n",
    "\n",
    "train[output_vars].hist(ax = ax1, bins = range(30), density = True)\n",
    "valid[output_vars].hist(ax = ax2, bins = range(30), density = True)\n",
    "test[output_vars].hist(ax = ax3, bins = range(30), density = True)\n",
    "\n",
    "ax1.set_ylabel(\"Train\")\n",
    "ax2.set_ylabel(\"Validation\")\n",
    "ax3.set_ylabel(\"Test\")\n",
    "ax3.set_xlabel(\"FMC value\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split the data by random shuffle "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_folds_random = data_shuffle_splitter(\n",
    "    df, \n",
    "    n_splits = n_splits, \n",
    "    seed = seed\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(387558, 41) (50361, 41) (48658, 41)\n"
     ]
    }
   ],
   "source": [
    "for train, valid, test in data_folds_random:\n",
    "    print(train.shape, valid.shape, test.shape)\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'FMC value')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 7), sharex=True, sharey='col')\n",
    "\n",
    "train[output_vars].hist(ax = ax1, bins = range(30), density = True)\n",
    "valid[output_vars].hist(ax = ax2, bins = range(30), density = True)\n",
    "test[output_vars].hist(ax = ax3, bins = range(30), density = True)\n",
    "\n",
    "ax1.set_ylabel(\"Train\")\n",
    "ax2.set_ylabel(\"Validation\")\n",
    "ax3.set_ylabel(\"Test\")\n",
    "ax3.set_xlabel(\"FMC value\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
